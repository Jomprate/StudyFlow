// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyFlow.DAL.Data;

#nullable disable

namespace StudyFlow.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241003005734_addSeedAnnounces")]
    partial class addSeedAnnounces
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fcac6ad-b928-4709-aa85-56f553ab37c1"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("1311d037-c130-4341-843d-3e2256fde577"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("99cf054f-8a59-46d0-b7c5-74e75b9f7264"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            RoleId = new Guid("1311d037-c130-4341-843d-3e2256fde577")
                        },
                        new
                        {
                            UserId = new Guid("a1bab37e-1d8a-48b8-a080-311c4b220b69"),
                            RoleId = new Guid("99cf054f-8a59-46d0-b7c5-74e75b9f7264")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Announce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternateLinks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoogleDriveLinks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("YouTubeVideos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Announces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05d444f6-9931-4361-98a4-28857e0631af"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Vamos a discutir los conceptos básicos de construcción de software y su importancia en el desarrollo de sistemas robustos.",
                            IsDeleted = false,
                            Title = "Introducción a la Construcción de Software",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("1991f0bf-b873-4be4-8d88-63bf192b83f0"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "En esta sesión aprenderemos sobre la importancia de las pruebas unitarias y cómo aplicarlas efectivamente.",
                            IsDeleted = false,
                            Title = "Pruebas Unitarias en Construcción de Software",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("e82fe4ff-8335-439b-911b-d83309f87367"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Exploraremos cómo la refactorización puede mejorar el código sin modificar su funcionalidad y las buenas prácticas para mantenerlo limpio.",
                            IsDeleted = false,
                            Title = "Refactorización y Buenas Prácticas",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("9beffd8b-aa73-4277-b58c-ae5d0541c57b"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Hablaremos sobre cómo implementar integración continua para detectar problemas antes de que lleguen a producción.",
                            IsDeleted = false,
                            Title = "Integración Continua (CI) en Proyectos de Software",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("a4bfbed2-eef2-4661-825b-463cb3867f53"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Aprenderemos cómo configurar un entorno de desarrollo local y la importancia de prácticas DevOps en el ciclo de desarrollo.",
                            IsDeleted = false,
                            Title = "Entorno de Desarrollo Local y DevOps",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("8f83ac1d-3169-41a9-bcf1-47870ab88e50"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Analizaremos cómo gestionar dependencias del proyecto y las mejores prácticas para el control de versiones con Git.",
                            IsDeleted = false,
                            Title = "Gestión de Dependencias y Control de Versiones",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("566c05dd-0c3f-4c27-a170-a796fb4d3e4e"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Exploraremos cómo aplicar metodologías ágiles, como Scrum y Kanban, durante el desarrollo de software.",
                            IsDeleted = false,
                            Title = "Metodologías Ágiles en la Construcción de Software",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("af6177e3-fb46-4236-9197-2625e053cd3b"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "La documentación es esencial para la construcción de software de calidad. Discutiremos cómo documentar adecuadamente el proyecto.",
                            IsDeleted = false,
                            Title = "Documentación del Código y del Proyecto",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("5b9a2887-1feb-4f08-924e-7eed04d9d2ad"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Aprenderemos sobre los patrones de diseño y cómo aplicarlos para construir una arquitectura robusta.",
                            IsDeleted = false,
                            Title = "Arquitectura y Patrones de Diseño",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        },
                        new
                        {
                            Id = new Guid("f27bf5df-6255-44dc-a7db-b7888901b17f"),
                            AlternateLinks = "[]",
                            CourseId = new Guid("e70b6d49-1025-4cdb-b25d-f9c5dbe8d8ec"),
                            GoogleDriveLinks = "[]",
                            HtmlContent = "Veremos herramientas como Visual Studio, Docker y Jenkins, que facilitan el proceso de construcción de software.",
                            IsDeleted = false,
                            Title = "Herramientas para la Construcción de Software",
                            UserId = new Guid("6fe44fdc-cac4-4d08-82d6-8a672b6960c0"),
                            YouTubeVideos = "[]"
                        });
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsoCode = "AFG",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            IsoCode = "ALB",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            IsoCode = "DZA",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            IsoCode = "AND",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 5,
                            IsoCode = "AGO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 6,
                            IsoCode = "ATG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7,
                            IsoCode = "ARG",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 8,
                            IsoCode = "ARM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 9,
                            IsoCode = "AUS",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 10,
                            IsoCode = "AUT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 11,
                            IsoCode = "AZE",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 12,
                            IsoCode = "BHS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 13,
                            IsoCode = "BHR",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 14,
                            IsoCode = "BGD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 15,
                            IsoCode = "BRB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 16,
                            IsoCode = "BLR",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 17,
                            IsoCode = "BEL",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 18,
                            IsoCode = "BLZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 19,
                            IsoCode = "BEN",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 20,
                            IsoCode = "BTN",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 21,
                            IsoCode = "BOL",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 22,
                            IsoCode = "BIH",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 23,
                            IsoCode = "BWA",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 24,
                            IsoCode = "BRA",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 25,
                            IsoCode = "BRN",
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = 26,
                            IsoCode = "BGR",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 27,
                            IsoCode = "BFA",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 28,
                            IsoCode = "BDI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 29,
                            IsoCode = "CPV",
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = 30,
                            IsoCode = "KHM",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 31,
                            IsoCode = "CMR",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 32,
                            IsoCode = "CAN",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 33,
                            IsoCode = "CAF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 34,
                            IsoCode = "TCD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 35,
                            IsoCode = "CHL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 36,
                            IsoCode = "CHN",
                            Name = "China"
                        },
                        new
                        {
                            Id = 37,
                            IsoCode = "COL",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 38,
                            IsoCode = "COM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 39,
                            IsoCode = "COG",
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 40,
                            IsoCode = "COD",
                            Name = "Congo, Democratic Republic of the"
                        },
                        new
                        {
                            Id = 41,
                            IsoCode = "CRI",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 42,
                            IsoCode = "HRV",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 43,
                            IsoCode = "CUB",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 44,
                            IsoCode = "CYP",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 45,
                            IsoCode = "CZE",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 46,
                            IsoCode = "DNK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 47,
                            IsoCode = "DJI",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 48,
                            IsoCode = "DMA",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 49,
                            IsoCode = "DOM",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 50,
                            IsoCode = "ECU",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 51,
                            IsoCode = "EGY",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 52,
                            IsoCode = "SLV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 53,
                            IsoCode = "GNQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 54,
                            IsoCode = "ERI",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 55,
                            IsoCode = "EST",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 56,
                            IsoCode = "SWZ",
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = 57,
                            IsoCode = "ETH",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 58,
                            IsoCode = "FJI",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 59,
                            IsoCode = "FIN",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 60,
                            IsoCode = "FRA",
                            Name = "France"
                        },
                        new
                        {
                            Id = 61,
                            IsoCode = "GAB",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 62,
                            IsoCode = "GMB",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 63,
                            IsoCode = "GEO",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 64,
                            IsoCode = "DEU",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 65,
                            IsoCode = "GHA",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 66,
                            IsoCode = "GRC",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 67,
                            IsoCode = "GRD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 68,
                            IsoCode = "GTM",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 69,
                            IsoCode = "GIN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 70,
                            IsoCode = "GNB",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 71,
                            IsoCode = "GUY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 72,
                            IsoCode = "HTI",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 73,
                            IsoCode = "HND",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 74,
                            IsoCode = "HUN",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 75,
                            IsoCode = "ISL",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 76,
                            IsoCode = "IND",
                            Name = "India"
                        },
                        new
                        {
                            Id = 77,
                            IsoCode = "IDN",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 78,
                            IsoCode = "IRN",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 79,
                            IsoCode = "IRQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 80,
                            IsoCode = "IRL",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 81,
                            IsoCode = "ISR",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 82,
                            IsoCode = "ITA",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 83,
                            IsoCode = "JAM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 84,
                            IsoCode = "JPN",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 85,
                            IsoCode = "JOR",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 86,
                            IsoCode = "KAZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 87,
                            IsoCode = "KEN",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 88,
                            IsoCode = "KIR",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 89,
                            IsoCode = "PRK",
                            Name = "Korea, North"
                        },
                        new
                        {
                            Id = 90,
                            IsoCode = "KOR",
                            Name = "Korea, South"
                        },
                        new
                        {
                            Id = 91,
                            IsoCode = "KWT",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 92,
                            IsoCode = "KGZ",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 93,
                            IsoCode = "LAO",
                            Name = "Laos"
                        },
                        new
                        {
                            Id = 94,
                            IsoCode = "LVA",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 95,
                            IsoCode = "LBN",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 96,
                            IsoCode = "LSO",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 97,
                            IsoCode = "LBR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 98,
                            IsoCode = "LBY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 99,
                            IsoCode = "LIE",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 100,
                            IsoCode = "LTU",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 101,
                            IsoCode = "LUX",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 102,
                            IsoCode = "MDG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 103,
                            IsoCode = "MWI",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 104,
                            IsoCode = "MYS",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 105,
                            IsoCode = "MDV",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 106,
                            IsoCode = "MLI",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 107,
                            IsoCode = "MLT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 108,
                            IsoCode = "MHL",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 109,
                            IsoCode = "MRT",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 110,
                            IsoCode = "MUS",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 111,
                            IsoCode = "MEX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 112,
                            IsoCode = "FSM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 113,
                            IsoCode = "MDA",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 114,
                            IsoCode = "MCO",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 115,
                            IsoCode = "MNG",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 116,
                            IsoCode = "MNE",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 117,
                            IsoCode = "MAR",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 118,
                            IsoCode = "MOZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 119,
                            IsoCode = "MMR",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 120,
                            IsoCode = "NAM",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 121,
                            IsoCode = "NRU",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 122,
                            IsoCode = "NPL",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 123,
                            IsoCode = "NLD",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 124,
                            IsoCode = "NZL",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 125,
                            IsoCode = "NIC",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 126,
                            IsoCode = "NER",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 127,
                            IsoCode = "NGA",
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 128,
                            IsoCode = "MKD",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = 129,
                            IsoCode = "NOR",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 130,
                            IsoCode = "OMN",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 131,
                            IsoCode = "PAK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 132,
                            IsoCode = "PLW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 133,
                            IsoCode = "PAN",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 134,
                            IsoCode = "PNG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 135,
                            IsoCode = "PRY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 136,
                            IsoCode = "PER",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 137,
                            IsoCode = "PHL",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 138,
                            IsoCode = "POL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 139,
                            IsoCode = "PRT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 140,
                            IsoCode = "QAT",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 141,
                            IsoCode = "ROU",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 142,
                            IsoCode = "RUS",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 143,
                            IsoCode = "RWA",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 144,
                            IsoCode = "KNA",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 145,
                            IsoCode = "LCA",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 146,
                            IsoCode = "VCT",
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 147,
                            IsoCode = "WSM",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 148,
                            IsoCode = "SMR",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 149,
                            IsoCode = "STP",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 150,
                            IsoCode = "SAU",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 151,
                            IsoCode = "SEN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 152,
                            IsoCode = "SRB",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 153,
                            IsoCode = "SYC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 154,
                            IsoCode = "SLE",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 155,
                            IsoCode = "SGP",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 156,
                            IsoCode = "SVK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 157,
                            IsoCode = "SVN",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 158,
                            IsoCode = "SLB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 159,
                            IsoCode = "SOM",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 160,
                            IsoCode = "ZAF",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 161,
                            IsoCode = "SSD",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 162,
                            IsoCode = "ESP",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 163,
                            IsoCode = "LKA",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 164,
                            IsoCode = "SDN",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 165,
                            IsoCode = "SUR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 166,
                            IsoCode = "SWE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 167,
                            IsoCode = "CHE",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 168,
                            IsoCode = "SYR",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 169,
                            IsoCode = "TWN",
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 170,
                            IsoCode = "TJK",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 171,
                            IsoCode = "TZA",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 172,
                            IsoCode = "THA",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 173,
                            IsoCode = "TLS",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 174,
                            IsoCode = "TGO",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 175,
                            IsoCode = "TON",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 176,
                            IsoCode = "TTO",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 177,
                            IsoCode = "TUN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 178,
                            IsoCode = "TUR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 179,
                            IsoCode = "TKM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 180,
                            IsoCode = "TUV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 181,
                            IsoCode = "UGA",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 182,
                            IsoCode = "UKR",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 183,
                            IsoCode = "ARE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 184,
                            IsoCode = "GBR",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 185,
                            IsoCode = "USA",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 186,
                            IsoCode = "URY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 187,
                            IsoCode = "UZB",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 188,
                            IsoCode = "VUT",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 189,
                            IsoCode = "VAT",
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = 190,
                            IsoCode = "VEN",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 191,
                            IsoCode = "VNM",
                            Name = "Vietnam"
                        },
                        new
                        {
                            Id = 192,
                            IsoCode = "YEM",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 193,
                            IsoCode = "ZMB",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 194,
                            IsoCode = "ZWE",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveLogo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccc9e1dd-6757-47c4-b01f-420ccad8e94d"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6609),
                            Description = "Mathematics is the study of numbers, quantities, and shapes.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Mathematics",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6622)
                        },
                        new
                        {
                            Id = new Guid("40da7738-2ffc-4d58-bc70-b5fc3f3af002"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6626),
                            Description = "Science is the study of the natural world.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Science",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6626)
                        },
                        new
                        {
                            Id = new Guid("c28cbcba-3c39-4ea2-b474-21344d3249de"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6634),
                            Description = "Computer science is the study of algorithmic processes, computational machines, and computation itself.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Computer Science",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6634)
                        },
                        new
                        {
                            Id = new Guid("df08f131-d14f-486a-9f8b-4ba57efa2a75"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6636),
                            Description = "History is the study of the past.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "History",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6637)
                        },
                        new
                        {
                            Id = new Guid("72e0865a-4932-467e-a7d4-52bf36d70d8d"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6639),
                            Description = "Geography is the study of places and the relationships between people and their environments.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Geography",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6640)
                        },
                        new
                        {
                            Id = new Guid("cd219fd6-4dfb-489b-811a-6d6a2764826d"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6642),
                            Description = "English is the study of the English language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "English",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6642)
                        },
                        new
                        {
                            Id = new Guid("6bf7c5f7-cabb-4f97-8f0b-88de3f14ba76"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6644),
                            Description = "Spanish is the study of the Spanish language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Spanish",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6645)
                        },
                        new
                        {
                            Id = new Guid("2de80330-f4da-4c41-95e2-215cf121389c"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6647),
                            Description = "French is the study of the French language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "French",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6647)
                        },
                        new
                        {
                            Id = new Guid("9d615c5b-8a0c-4a78-85cb-202239027366"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6649),
                            Description = "German is the study of the German language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "German",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6650)
                        },
                        new
                        {
                            Id = new Guid("fb59c0fa-dff6-41d0-a1ad-737eb5a9abdc"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6652),
                            Description = "Italian is the study of the Italian language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Italian",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6652)
                        },
                        new
                        {
                            Id = new Guid("c6dee820-894b-449a-8a29-78e14e7fdde8"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6657),
                            Description = "Chinese is the study of the Chinese language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Chinese",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6657)
                        },
                        new
                        {
                            Id = new Guid("ddc1119d-be7d-45a1-b519-7ebbefc6f3f3"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6659),
                            Description = "Japanese is the study of the Japanese language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Japanese",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6660)
                        },
                        new
                        {
                            Id = new Guid("18579284-f91a-473b-853d-7ad533e4cb91"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6684),
                            Description = "Korean is the study of the Korean language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Korean",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6684)
                        },
                        new
                        {
                            Id = new Guid("db1419a5-fb34-4169-b04d-0f10226e27f9"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6686),
                            Description = "Arabic is the study of the Arabic language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Arabic",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6686)
                        },
                        new
                        {
                            Id = new Guid("2e4cfe28-f621-47c8-b301-fbfeaa369d74"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6688),
                            Description = "Russian is the study of the Russian language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Russian",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6688)
                        },
                        new
                        {
                            Id = new Guid("ffc33151-92d3-4d9d-ab13-e9b6a10407ec"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6689),
                            Description = "Portuguese is the study of the Portuguese language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Portuguese",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6690)
                        },
                        new
                        {
                            Id = new Guid("6ccc5e3a-8c46-40df-8590-53d9e87ba9b3"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6691),
                            Description = "Dutch is the study of the Dutch language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Dutch",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6692)
                        },
                        new
                        {
                            Id = new Guid("9d534204-88dc-44bb-8062-896b4a0f93be"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6693),
                            Description = "Swedish is the study of the Swedish language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Swedish",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6694)
                        },
                        new
                        {
                            Id = new Guid("6561e3ff-df06-458e-bb1e-a768c24fa829"),
                            CreatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6696),
                            Description = "Norwegian is the study of the Norwegian language.",
                            HaveLogo = false,
                            IsEnabled = false,
                            Name = "Norwegian",
                            TeacherId = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            UpdatedAt = new DateTime(2024, 10, 2, 19, 57, 34, 245, DateTimeKind.Local).AddTicks(6697)
                        });
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Enrollment", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Scheduled", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("SubjectId", "ScheduledDate");

                    b.ToTable("Scheduleds");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveProfilePicture")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4154143c-228b-4241-9b4c-7b54c56406cf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42a18e94-656c-4da3-938f-0c59713ae22b",
                            CountryId = 43,
                            Email = "teacheruser@example.com",
                            EmailConfirmed = true,
                            FirstName = "Teacher",
                            HaveProfilePicture = false,
                            IsEnabled = false,
                            IsOnline = false,
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "TEACHERUSER@EXAMPLE.COM",
                            NormalizedUserName = "TEACHERUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEqE0cPaZUX3vcUlxNhjrQff5IQUrUG7qtwUWxdyXbE3Xpz2dPWmP9nULoMoSFh0hw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c32bf1d3-b9c6-41b9-a8e8-62210ca3a2a2",
                            TwoFactorEnabled = false,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("a1bab37e-1d8a-48b8-a080-311c4b220b69"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe8acd88-56dc-46ff-a81b-ce7d0266201a",
                            CountryId = 35,
                            Email = "studentuser@example.com",
                            EmailConfirmed = true,
                            FirstName = "Student",
                            HaveProfilePicture = false,
                            IsEnabled = false,
                            IsOnline = false,
                            LastName = "User",
                            LockoutEnabled = true,
                            NormalizedEmail = "STUDENTUSER@EXAMPLE.COM",
                            NormalizedUserName = "STUDENTUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMdffFZTOn6hFr/jrIsAqTmCDqqY1ZyjapXtBO+iXBUM/jpaVf8zVzWFgRf5Ye/N1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b91cd51-5d62-47a8-9e4e-9ce35d7f044e",
                            TwoFactorEnabled = false,
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Announce", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.Course", "Course")
                        .WithMany("Announces")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Course", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.User", "Teacher")
                        .WithMany("ListCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Enrollment", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.Course", "Course")
                        .WithMany("ListEnrollment")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyFlow.DAL.Entities.User", "Student")
                        .WithMany("ListEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Notification", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StudyFlow.DAL.Entities.User", "User")
                        .WithMany("ListNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Scheduled", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.Subject", "Subject")
                        .WithMany("ListScheduled")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Subject", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.Course", "Course")
                        .WithMany("ListSubject")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.User", b =>
                {
                    b.HasOne("StudyFlow.DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Course", b =>
                {
                    b.Navigation("Announces");

                    b.Navigation("ListEnrollment");

                    b.Navigation("ListSubject");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.Subject", b =>
                {
                    b.Navigation("ListScheduled");
                });

            modelBuilder.Entity("StudyFlow.DAL.Entities.User", b =>
                {
                    b.Navigation("ListCourses");

                    b.Navigation("ListEnrollments");

                    b.Navigation("ListNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
